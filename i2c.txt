/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
    AUDIO_MODE_IDLE = 0,
    AUDIO_MODE_LIVE = 1
} AudioMode_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// NC100 I2C Defines
#define NC100_I2C_ADDR_LEFT 0x2A  // Left channel (SEL_AP = GND)
#define NC100_I2C_ADDR_RIGHT 0x55 // Right channel (SEL_AP = VDD)

// I2C Commands
#define NC100_READ_SET_CMD 0x12
#define NC100_READ_CLEAR_CMD 0xED
#define NC100_WRITE_SET_CMD 0x10
#define NC100_WRITE_CLEAR_CMD 0xEF

// Register addresses
#define NC100_REG_PDM_FREQ 0x03     // PDM frequency register
#define NC100_REG_OPERATION 0x05    // Operation mode register
#define NC100_REG_PDM_MODE 0x0F     // PDM mode register
#define NC100_REG_PDM2PCM_GAIN 0x06 // PDM2PCM gain register

// Operation modes
#define NC100_MODE_ENC 0x00    // Environmental Noise Cancellation
#define NC100_MODE_BYPASS 0x02 // Bypass mode (no ENC)

// PDM frequencies
#define NC100_PDM_FREQ_768K 0x00  // 768kHz
#define NC100_PDM_FREQ_1536K 0x01 // 1.536MHz
#define NC100_PDM_FREQ_2304K 0x02 // 2.304MHz
#define NC100_PDM_FREQ_3072K 0x03 // 3.072MHz (default)

// Default gain value
#define NC100_DEFAULT_GAIN 0x24 // Decimal 36

// I2S Audio definitions
#define AUDIO_BLOCK_SIZE 64
#define AUDIO_BUFFER_SIZE (AUDIO_BLOCK_SIZE * 4)
#define MAXVOLUME 100
#define MINVOLUME 5
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c3;

I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_tx;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// Audio buffers - Changed to 32-bit to match I2S configuration
uint32_t rxBuffer[AUDIO_BUFFER_SIZE];
uint32_t txBuffer[AUDIO_BUFFER_SIZE];

// Audio state variables
AudioMode_t audioMode = AUDIO_MODE_IDLE;
uint16_t volumeValue = 50;
uint32_t audioSampleCount = 0;
uint8_t audioMuteState = 1;  // 1 = muted, 0 = unmuted

// Original variables
uint16_t MidBuffer[16];
uint8_t txstate = 0;
uint8_t rxstate = 0;

uint16_t fifobuf[256];
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;
uint8_t nc100_i2c_address = NC100_I2C_ADDR_LEFT;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2S1_Init(void);
static void MX_I2S2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C3_Init(void);
/* USER CODE BEGIN PFP */
HAL_StatusTypeDef NC100_Write_Register(uint8_t reg_addr, uint16_t data);
HAL_StatusTypeDef NC100_Read_Register(uint8_t reg_addr, uint16_t *data);
HAL_StatusTypeDef NC100_Init(void);
HAL_StatusTypeDef NC100_Set_PDM_Frequency(uint8_t freq);
HAL_StatusTypeDef NC100_Set_Operation_Mode(uint8_t mode);
HAL_StatusTypeDef NC100_Set_PDM2PCM_Gain(uint16_t gain);
HAL_StatusTypeDef NC100_Set_PDM_Mode(uint16_t mode);
HAL_StatusTypeDef NC100_Get_Operation_Mode(uint8_t *mode);
HAL_StatusTypeDef NC100_Get_PDM_Frequency(uint8_t *freq);
HAL_StatusTypeDef NC100_Print_All_Registers(void);

// I2S Live Mode functions
void Audio_Init_Live_Mode(void);
void Audio_Start_Live_Mode(void);
void Audio_Stop_Live_Mode(void);
void Audio_Mute(void);
void Audio_UnMute(void);
void Audio_Set_Volume(uint16_t volume);
void Audio_Process_Live_Data(uint32_t *rxData, uint32_t *txData, uint16_t size);  // Changed to 32-bit
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ENC_reset(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
	HAL_Delay(1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
}

void FifoWrite(uint16_t data)
{
    fifobuf[fifo_w_ptr] = data;
    fifo_w_ptr++;
}

uint16_t FifoRead()
{
    uint16_t val = fifobuf[fifo_r_ptr];
    fifo_r_ptr++;
    return val;
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
    if (hi2s->Instance == SPI2) {
        txstate = 1;
        if (audioMode == AUDIO_MODE_LIVE) {
            // Process first half of TX buffer
            Audio_Process_Live_Data(&rxBuffer[0], &txBuffer[0], AUDIO_BLOCK_SIZE);
        }
    }
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
    if (hi2s->Instance == SPI2) {
        txstate = 2;
        if (audioMode == AUDIO_MODE_LIVE) {
            // Process second half of TX buffer
            Audio_Process_Live_Data(&rxBuffer[AUDIO_BLOCK_SIZE], &txBuffer[AUDIO_BLOCK_SIZE], AUDIO_BLOCK_SIZE);
        }
    }
}

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
    if (hi2s->Instance == SPI1) {
        rxstate = 1;
        // RX data ready in first half of buffer
    }
}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
    if (hi2s->Instance == SPI1) {
        rxstate = 2;
        // RX data ready in second half of buffer
    }
}

/**
 * @brief Write to NC100 register
 * @param reg_addr Register address
 * @param data 16-bit data to write
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Write_Register(uint8_t reg_addr, uint16_t data)
{
    HAL_StatusTypeDef status;
    uint8_t write_set_packet[2];
    uint8_t write_data_packet[3];
    uint8_t write_clear_packet[2];

    // Step 1: Send Write Set Command + Address
    write_set_packet[0] = NC100_WRITE_SET_CMD;
    write_set_packet[1] = reg_addr;
    status = HAL_I2C_Master_Transmit(&hi2c3, nc100_i2c_address << 1, write_set_packet, 2, 100);
    if (status != HAL_OK) return status;

    HAL_Delay(1);

    // Step 2: Send Address + Data
    write_data_packet[0] = reg_addr;
    write_data_packet[1] = (data >> 8) & 0xFF;
    write_data_packet[2] = data & 0xFF;
    status = HAL_I2C_Master_Transmit(&hi2c3, nc100_i2c_address << 1, write_data_packet, 3, 100);
    if (status != HAL_OK) return status;

    HAL_Delay(1);

    // Step 3: Send Clear Command
    write_clear_packet[0] = NC100_WRITE_CLEAR_CMD;
    write_clear_packet[1] = NC100_WRITE_CLEAR_CMD;
    status = HAL_I2C_Master_Transmit(&hi2c3, nc100_i2c_address << 1, write_clear_packet, 2, 100);

    return status;
}

/**
 * @brief Read from NC100 register
 * @param reg_addr Register address
 * @param data Pointer to store read data
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Read_Register(uint8_t reg_addr, uint16_t *data)
{
    HAL_StatusTypeDef status;
    uint8_t read_set_packet[2];
    uint8_t read_data[4];
    uint8_t read_clear_packet[2];

    // Step 1: Send Read Set Command + Address
    read_set_packet[0] = NC100_READ_SET_CMD;
    read_set_packet[1] = reg_addr;
    status = HAL_I2C_Master_Transmit(&hi2c3, nc100_i2c_address << 1, read_set_packet, 2, 100);
    if (status != HAL_OK) return status;

    HAL_Delay(1);

    // Step 2: Read 4 bytes of data
    status = HAL_I2C_Master_Receive(&hi2c3, nc100_i2c_address << 1, read_data, 4, 100);
    if (status != HAL_OK) return status;

    // Convert to 16-bit value (use bytes 2 and 3)
    *data = ((uint16_t)read_data[2] << 8) | ((uint16_t)read_data[3]);

    HAL_Delay(1);

    // Step 3: Send Clear Command
    read_clear_packet[0] = NC100_READ_CLEAR_CMD;
    read_clear_packet[1] = NC100_READ_CLEAR_CMD;
    status = HAL_I2C_Master_Transmit(&hi2c3, nc100_i2c_address << 1, read_clear_packet, 2, 100);

    return status;
}

/**
 * @brief Initialize NC100 chip with default configuration
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Init(void)
{
    HAL_StatusTypeDef status;

    // Set PDM frequency to 3.072MHz (default)
    status = NC100_Set_PDM_Frequency(NC100_PDM_FREQ_3072K);
    if (status != HAL_OK) return status;

    // Set to Bypass mode
    status = NC100_Set_Operation_Mode(NC100_MODE_BYPASS);
    if (status != HAL_OK) return status;

    // Set PDM mode to 0x0
    status = NC100_Set_PDM_Mode(0x0000);
    if (status != HAL_OK) return status;

    // Set default gain
    status = NC100_Set_PDM2PCM_Gain(NC100_DEFAULT_GAIN);
    if (status != HAL_OK) return status;

    return HAL_OK;
}

/**
 * @brief Set operation mode
 * @param mode Operation mode (0=ENC, 2=Bypass)
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Set_Operation_Mode(uint8_t mode)
{
    if (mode != NC100_MODE_ENC && mode != NC100_MODE_BYPASS)
        return HAL_ERROR;
    return NC100_Write_Register(NC100_REG_OPERATION, (uint16_t)mode);
}

/**
 * @brief Set PDM frequency
 * @param freq Frequency setting (0-3)
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Set_PDM_Frequency(uint8_t freq)
{
    if (freq > 3) return HAL_ERROR;
    return NC100_Write_Register(NC100_REG_PDM_FREQ, (uint16_t)freq);
}

/**
 * @brief Set PDM2PCM gain
 * @param gain Gain value
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Set_PDM2PCM_Gain(uint16_t gain)
{
    HAL_StatusTypeDef status;
    uint16_t reg_value;

    // Read current register value
    status = NC100_Read_Register(NC100_REG_PDM2PCM_GAIN, &reg_value);
    if (status != HAL_OK) return status;

    // Clear bits 12:3 and set new gain value
    reg_value &= ~(0x3FF << 3);
    reg_value |= ((gain & 0x3FF) << 3);

    // Write back the modified value
    return NC100_Write_Register(NC100_REG_PDM2PCM_GAIN, reg_value);
}

/**
 * @brief Set PDM mode
 * @param mode PDM mode value
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Set_PDM_Mode(uint16_t mode)
{
    return NC100_Write_Register(NC100_REG_PDM_MODE, mode);
}

/**
 * @brief Initialize I2S for Live Mode (based on Arduino ClarityDemo)
 * @return None
 */
void Audio_Init_Live_Mode(void)
{
    // Clear buffers
    memset(rxBuffer, 0, sizeof(rxBuffer));
    memset(txBuffer, 0, sizeof(txBuffer));

    // Initialize audio state
    audioMode = AUDIO_MODE_IDLE;
    audioSampleCount = 0;
    volumeValue = 50;
    audioMuteState = 1;  // Start muted

    char init_msg[] = "I2S Live Mode Init OK\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)init_msg, strlen(init_msg), 100);
}

/**
 * @brief Start I2S Live Mode - pass audio from RX to TX
 * @return None
 */
void Audio_Start_Live_Mode(void)
{
    if (audioMode == AUDIO_MODE_LIVE) return;

    Audio_Mute();
    HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)rxBuffer, AUDIO_BUFFER_SIZE * 2);
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)txBuffer, AUDIO_BUFFER_SIZE * 2);
    audioMode = AUDIO_MODE_LIVE;

    HAL_Delay(100);
    Audio_UnMute();

    char start_msg[] = "I2S Live Mode Started\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)start_msg, strlen(start_msg), 100);

    // 👇 In 16 mẫu đầu tiên của rxBuffer (raw input)
    Print_Audio_Buffer(rxBuffer, 16, "Raw RX");

    // 👇 In 16 mẫu đầu tiên của txBuffer (đã xử lý & truyền ra)
    Print_Audio_Buffer(txBuffer, 16, "Processed TX");
}

/**
 * @brief Stop I2S Live Mode
 * @return None
 */
void Audio_Stop_Live_Mode(void)
{
    if (audioMode != AUDIO_MODE_LIVE) return;

    // Mute audio
    Audio_Mute();

    // Stop I2S
    HAL_I2S_DMAStop(&hi2s1);
    HAL_I2S_DMAStop(&hi2s2);

    audioMode = AUDIO_MODE_IDLE;

    char stop_msg[] = "I2S Live Mode Stopped\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)stop_msg, strlen(stop_msg), 100);
}

/**
 * @brief Mute audio output
 * @return None
 */
void Audio_Mute(void)
{
    // Assuming mute is controlled by a GPIO pin
    // HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_SET);
    audioMuteState = 1;
}

/**
 * @brief Unmute audio output
 * @return None
 */
void Audio_UnMute(void)
{
    // Assuming mute is controlled by a GPIO pin
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
    audioMuteState = 0;
}

/**
 * @brief Set audio volume
 * @param volume Volume level (0-100)
 * @return None
 */
void Audio_Set_Volume(uint16_t volume)
{
    if (volume > MAXVOLUME) volume = MAXVOLUME;
    if (volume < MINVOLUME) volume = MINVOLUME;
    volumeValue = volume;
}

/**
 * @brief Process live audio data - pass RX to TX with volume control
 * @param rxData Pointer to received audio data (32-bit)
 * @param txData Pointer to transmit audio data (32-bit)
 * @param size Number of samples to process
 * @return None
 */
void Audio_Process_Live_Data(uint32_t *rxData, uint32_t *txData, uint16_t size)
{
    if (audioMuteState) {
        // Muted - output silence
        memset(txData, 0, size * 4); // Changed to 4 bytes for 32-bit
        return;
    }

    // Process audio data (similar to Arduino codecTxReadyInterrupt)
    for (uint16_t i = 0; i < size; i++) {
        // Get input sample - NC100 outputs 20-bit PCM left-justified in 32-bit
        // Extract upper 16 bits like Arduino: (rdat>>16)
        uint32_t rawSample = rxData[i] & 0xFFFFF000; // Mask to get 20-bit data
        int32_t inputSample = (int32_t)(rawSample >> 16); // Get upper 16 bits as signed

        // Apply volume control
        int32_t outputSample = (inputSample * volumeValue) / MAXVOLUME;

        // Skip first 100ms of samples to avoid initial noise (like Arduino)
        if (audioSampleCount < (100 * 48)) {  // 48kHz * 0.1s
            outputSample = 0;
        }

        // Store output sample - shift back to 32-bit format
        txData[i] = (uint32_t)((outputSample << 16) & 0xFFFF0000); // Left-justify 16-bit in 32-bit

        audioSampleCount++;
    }
}

void Print_Audio_Buffer(uint32_t *buffer, uint16_t size, const char *label)
{
    char msg[64];

    HAL_UART_Transmit(&huart2, (uint8_t *)label, strlen(label), 100);
    HAL_UART_Transmit(&huart2, (uint8_t *)":\r\n", 3, 100);

    for (uint16_t i = 0; i < size; i++) {
        int len = snprintf(msg, sizeof(msg), "[%03u] 0x%08lX\r\n", i, buffer[i]);
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, 100);
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)"--- END ---\r\n", 14, 100);
}

/**
 * @brief Print all NC100 registers that were initialized in init_Soloma
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Print_All_Registers(void)
{
    HAL_StatusTypeDef status;
    uint16_t reg_value;
    uint8_t freq_value;
    uint8_t mode_value;
    char uart_buffer[150];

    sprintf(uart_buffer, "\r\n=== NC100 REGISTER STATUS ===\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

    // 1. Read PDM Frequency Register (0x03)
    sprintf(uart_buffer, "1. PDM Frequency Register (0x03):\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

    status = NC100_Get_PDM_Frequency(&freq_value);
    if (status == HAL_OK) {
        sprintf(uart_buffer, "   Value: 0x%02X = %d ", freq_value, freq_value);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

        const char *freq_str;
        switch (freq_value) {
            case 0: freq_str = "768kHz"; break;
            case 1: freq_str = "1.536MHz"; break;
            case 2: freq_str = "2.304MHz"; break;
            case 3: freq_str = "3.072MHz"; break;
            default: freq_str = "UNKNOWN"; break;
        }
        sprintf(uart_buffer, "(%s)\r\n", freq_str);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    } else {
        sprintf(uart_buffer, "   ERROR: Failed to read PDM Frequency (Status: %d)\r\n", status);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    }

    // 2. Read Operation Mode Register (0x05)
    sprintf(uart_buffer, "2. Operation Mode Register (0x05):\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

    status = NC100_Get_Operation_Mode(&mode_value);
    if (status == HAL_OK) {
        sprintf(uart_buffer, "   Value: 0x%02X = %d ", mode_value, mode_value);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

        const char *mode_str = (mode_value == NC100_MODE_ENC) ? "ENC" :
                              (mode_value == NC100_MODE_BYPASS) ? "BYPASS" : "UNKNOWN";
        sprintf(uart_buffer, "(%s)\r\n", mode_str);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    } else {
        sprintf(uart_buffer, "   ERROR: Failed to read Operation Mode (Status: %d)\r\n", status);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    }

    // 3. Read PDM Mode Register (0x0F)
    sprintf(uart_buffer, "3. PDM Mode Register (0x0F):\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

    status = NC100_Read_Register(NC100_REG_PDM_MODE, &reg_value);
    if (status == HAL_OK) {
        sprintf(uart_buffer, "   Value: 0x%04X = %d\r\n", reg_value, reg_value);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    } else {
        sprintf(uart_buffer, "   ERROR: Failed to read PDM Mode (Status: %d)\r\n", status);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    }

    // 4. Read PDM2PCM Gain Register (0x06)
    sprintf(uart_buffer, "4. PDM2PCM Gain Register (0x06):\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

    status = NC100_Read_Register(NC100_REG_PDM2PCM_GAIN, &reg_value);
    if (status == HAL_OK) {
        uint16_t gain_value = (reg_value >> 3) & 0x3FF;  // Extract bits 12:3
        sprintf(uart_buffer, "   Raw Value: 0x%04X = %d\r\n", reg_value, reg_value);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
        sprintf(uart_buffer, "   Gain Value (bits 12:3): %d\r\n", gain_value);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    } else {
        sprintf(uart_buffer, "   ERROR: Failed to read PDM2PCM Gain (Status: %d)\r\n", status);
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);
    }

    sprintf(uart_buffer, "=== END REGISTER STATUS ===\r\n\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 100);

    return HAL_OK;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2S1_Init();
  MX_I2S2_Init();
  MX_USART2_UART_Init();
  MX_I2C3_Init();
  /* USER CODE BEGIN 2 */

  // Wait for I2C to stabilize
  HAL_Delay(100);
  ENC_reset();

  // Check for NC100 devices
  HAL_StatusTypeDef left_status = HAL_I2C_IsDeviceReady(&hi2c3, NC100_I2C_ADDR_LEFT << 1, 1, 100);
  HAL_StatusTypeDef right_status = HAL_I2C_IsDeviceReady(&hi2c3, NC100_I2C_ADDR_RIGHT << 1, 1, 100);

  // Choose which NC100 to use
  if (left_status == HAL_OK) {
      nc100_i2c_address = NC100_I2C_ADDR_LEFT;
  } else if (right_status == HAL_OK) {
      nc100_i2c_address = NC100_I2C_ADDR_RIGHT;
  } else {
      // No NC100 found - handle error
      char error_msg[] = "NC100: No device found\r\n";
      HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), 100);
  }

  // Initialize NC100 if found
  if (left_status == HAL_OK || right_status == HAL_OK) {
      if (NC100_Init() == HAL_OK) {
          char init_msg[] = "NC100: Init OK\r\n";
          HAL_UART_Transmit(&huart2, (uint8_t *)init_msg, strlen(init_msg), 100);
      } else {
          char error_msg[] = "NC100: Init failed\r\n";
          HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), 100);
      }
  }

  // Initialize I2S Live Mode
  Audio_Init_Live_Mode();
  NC100_Print_All_Registers();
  // Start Live Mode if NC100 is available
  if (left_status == HAL_OK || right_status == HAL_OK) {
      Audio_Start_Live_Mode();
  }
  NC100_Print_All_Registers();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      // Main application loop

      // Example: Volume control via UART (optional)
      // You can add volume control, mute/unmute commands here

      HAL_Delay(1000);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{

  /* USER CODE BEGIN I2S1_Init 0 */

  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_32B;
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}

/**
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{

  /* USER CODE BEGIN I2S2_Init 0 */

  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/*
* @brief Get PDM frequency setting
* @param freq Pointer to store frequency setting
* @return HAL_StatusTypeDef
*/
HAL_StatusTypeDef NC100_Get_PDM_Frequency(uint8_t *freq)
{
   HAL_StatusTypeDef status;
   uint16_t data;

   status = NC100_Read_Register(NC100_REG_PDM_FREQ, &data);
   if (status == HAL_OK) {
       *freq = (uint8_t)(data & 0xFF);
   }
   return status;
}

/**
 * @brief Get operation mode
 * @param mode Pointer to store operation mode
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef NC100_Get_Operation_Mode(uint8_t *mode)
{
    HAL_StatusTypeDef status;
    uint16_t data;

    status = NC100_Read_Register(NC100_REG_OPERATION, &data);
    if (status == HAL_OK)
    {
        *mode = (uint8_t)(data & 0xFF);
    }
    return status;
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
